import axios, { AxiosError } from 'axios';

export interface TelegramMessage {
  chat_id: string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
}

export interface TelegramSendResult {
  success: boolean;
  message_id?: number;
  error?: string;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 */
export async function sendTelegramMessage(
  chatId: string, 
  text: string, 
  parseMode: 'HTML' | 'Markdown' = 'HTML'
): Promise<TelegramSendResult> {
  try {
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;
    
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('TELEGRAM_BOT_TOKEN:', TELEGRAM_BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('TELEGRAM_API_URL:', TELEGRAM_API_URL);
    
    if (!TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const response = await axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
      chat_id: chatId,
      text: text,
      parse_mode: parseMode,
    });

    if (response.data.ok) {
      return {
        success: true,
        message_id: response.data.result.message_id,
      };
    } else {
      return {
        success: false,
        error: response.data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API',
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    
    if (axios.isAxiosError(error)) {
      const errorData = (error as AxiosError).response?.data as any;
      const errorMessage = errorData?.description || error.message;
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ Telegram API: ${errorMessage}`,
      };
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 */
export function formatEncryptedMessage(
  encryptedText: string, 
  encryptionKey: string, 
  originalText?: string
): string {
    const CLIENT_URL = process.env.CLIENT_URL || 'http://localhost:3000';  
  const message = `
üîê <b>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

<b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
${originalText || '–ù–µ —É–∫–∞–∑–∞–Ω'}

<b>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
<code>${encryptedText}</code>

<b>–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:</b>
<code>${encryptionKey}</code>

<i>–î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${CLIENT_URL}</i>
  `.trim();

  return message;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –¥–≤—É—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function sendEncryptedMessageSeparate(
  chatId: string,
  encryptedText: string,
  encryptionKey: string,
  originalText?: string
): Promise<TelegramSendResult> {
  try {
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;
    
    if (!TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const CLIENT_URL = 'https://encrypting-app.vercel.app/';
    
    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const message1 = `
üîê <b>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

<b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
${originalText || '–ù–µ —É–∫–∞–∑–∞–Ω'}

<b>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>
<code>${encryptedText}</code>

<i>–î–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${CLIENT_URL}</i>
    `.trim();

    // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    const message2 = `
üîë <b>–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è</b>

<code>${encryptionKey}</code>

<i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏</i>
    `.trim();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response1 = await axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
      chat_id: chatId,
      text: message1,
      parse_mode: 'HTML',
    });

    if (!response1.data.ok) {
      return {
        success: false,
        error: response1.data.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      };
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response2 = await axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
      chat_id: chatId,
      text: message2,
      parse_mode: 'HTML',
    });

    if (!response2.data.ok) {
      return {
        success: false,
        error: response2.data.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      };
    }

    return {
      success: true,
      message_id: response1.data.result.message_id,
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram:', error);
    
    if (axios.isAxiosError(error)) {
      const errorData = (error as AxiosError).response?.data as any;
      const errorMessage = errorData?.description || error.message;
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ Telegram API: ${errorMessage}`,
      };
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id
 */
export function isValidChatId(chatId: string): boolean {
  // Telegram chat_id –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å @
  // –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø
  return /^(@\w+|-?\d+)$/.test(chatId);
}
