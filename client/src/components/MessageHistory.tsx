import { useState } from 'react';
import { EncryptedMessage } from '../types/message-history';

interface MessageHistoryProps {
  messages: EncryptedMessage[];
  isLoading: boolean;
  onDeleteMessage: (messageId: string) => void;
  onClearHistory: () => void;
  onRemoveDuplicates?: () => void;
  hasDuplicates?: boolean;
}

export const MessageHistory = ({ 
  messages, 
  isLoading, 
  onDeleteMessage, 
  onClearHistory,
  onRemoveDuplicates,
  hasDuplicates = false
}: MessageHistoryProps) => {
  const [expandedMessage, setExpandedMessage] = useState<string | null>(null);
  const [showConfirmClear, setShowConfirmClear] = useState(false);

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    }
  };

  const handleClearHistory = () => {
    onClearHistory();
    setShowConfirmClear(false);
  };

  if (isLoading) {
    return (
      <div className="message-history">
        <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>
      </div>
    );
  }

  if (messages.length === 0) {
    return (
      <div className="message-history">
        <div className="empty-state">
          <h3>üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞</h3>
          <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
        </div>
      </div>
    );
  }

  return (
    <div className="message-history">
      <div className="history-header">
        <h3>üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ({messages.length})</h3>
        <div className="history-actions">
          {onRemoveDuplicates && hasDuplicates && (
            <button 
              className="remove-duplicates-btn"
              onClick={onRemoveDuplicates}
              title="–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"
            >
              üßπ –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
            </button>
          )}
          <button 
            className="clear-history-btn"
            onClick={() => setShowConfirmClear(true)}
            title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>
      </div>

      {showConfirmClear && (
        <div className="confirm-dialog">
          <div className="confirm-content">
            <h4>‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</h4>
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π?</p>
            <div className="confirm-buttons">
              <button 
                className="confirm-btn danger"
                onClick={handleClearHistory}
              >
                –î–∞, —É–¥–∞–ª–∏—Ç—å
              </button>
              <button 
                className="confirm-btn"
                onClick={() => setShowConfirmClear(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="messages-list">
        {messages.map((message) => (
          <div key={message.id} className="message-item">
            <div className="message-header">
              <div className="message-info">
                <span className="message-time">{formatDate(message.timestamp)}</span>
                {message.sentToTelegram && (
                  <span className="telegram-sent">üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram</span>
                )}
              </div>
              <button 
                className="delete-message-btn"
                onClick={() => onDeleteMessage(message.id)}
                title="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
              >
                ‚ùå
              </button>
            </div>

            <div className="message-content">
              <div className="original-text">
                <strong>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</strong>
                <p>{message.originalText}</p>
              </div>

              <div className="encrypted-section">
                <div className="encrypted-header">
                  <button 
                    className="toggle-btn"
                    onClick={() => setExpandedMessage(
                      expandedMessage === message.id ? null : message.id
                    )}
                  >
                    {expandedMessage === message.id ? 'üîΩ' : '‚ñ∂Ô∏è'} –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                  </button>
                </div>

                {expandedMessage === message.id && (
                  <div className="encrypted-data">
                    <div className="encrypted-item">
                      <div className="encrypted-label">
                        <label>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</label>
                        <button 
                          className="copy-btn"
                          onClick={() => copyToClipboard(message.encryptedText)}
                          title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
                        >
                          üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                      </div>
                      <div className="encrypted-value">
                        <pre>{message.encryptedText}</pre>
                      </div>
                    </div>

                    <div className="encrypted-item">
                      <div className="encrypted-label">
                        <label>–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:</label>
                        <button 
                          className="copy-btn"
                          onClick={() => copyToClipboard(message.encryptionKey)}
                          title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"
                        >
                          üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                      </div>
                      <div className="encrypted-value">
                        <pre>{message.encryptionKey}</pre>
                      </div>
                    </div>

                    {message.telegramChatId && (
                      <div className="telegram-info">
                        <strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:</strong> {message.telegramChatId}
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
