import { useEncryption } from "../../hooks/useEncryption";
import { useTelegram } from "../../hooks/useTelegram";
import { useMessageHistory } from "../../hooks/useMessageHistory";
import { MessageHistory } from "../MessageHistory";
import { Tabs } from "../Tabs";
import { useState, useContext, useEffect } from "react";
import { AuthContext } from "../../context/AuthContext";

export const Encryption = () => {
    const authContext = useContext(AuthContext);
    const user = authContext?.user;
    const { 
      text, 
      setText, 
      handleEncrypt, 
      result, 
      isEncrypting, 
      encryptedText, 
      encryptionKey, 
      originalText, 
      copyEncryptedText, 
      copyKey, 
      copyStatus
    } = useEncryption();

    const { isSending, sendStatus, sendToTelegram, clearStatus } = useTelegram();
    const { 
      messages, 
      isLoading: historyLoading, 
      saveMessage, 
      updateMessage, 
      deleteMessage, 
      clearHistory,
      removeDuplicates 
    } = useMessageHistory(user?.id || null);
    
    const [telegramChatId, setTelegramChatId] = useState<string>("");
    const [showTelegramForm, setShowTelegramForm] = useState<boolean>(false);
    const [activeTab, setActiveTab] = useState<string>("encrypt");
    const [lastSavedHash, setLastSavedHash] = useState<string>(""); // –•–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const hasDuplicates = () => {
        if (messages.length <= 1) return false;
        
        const seen = new Set<string>();
        for (const message of messages) {
            const messageKey = btoa(encodeURIComponent(`${message.originalText}-${message.encryptedText}-${message.encryptionKey}`));
            if (seen.has(messageKey)) {
                return true;
            }
            seen.add(messageKey);
        }
        return false;
    };

    // useEffect –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    useEffect(() => {
        if (encryptedText && encryptionKey && originalText) {
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è Unicode)
            const messageHash = btoa(encodeURIComponent(originalText + encryptedText + encryptionKey)).slice(0, 20);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
            if (messageHash !== lastSavedHash) {
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é:');
                console.log('üìù originalText:', originalText);
                console.log('üîê encryptedText:', encryptedText);
                console.log('üîë encryptionKey:', encryptionKey);
                console.log('üîç messageHash:', messageHash);
                console.log('üîç lastSavedHash:', lastSavedHash);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É
                if (originalText.trim() && encryptedText.trim() && encryptionKey.trim()) {
                    saveMessage({
                        originalText: originalText,
                        encryptedText: encryptedText,
                        encryptionKey: encryptionKey,
                    });
                    
                    setLastSavedHash(messageHash);
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                }
            } else {
                console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ö–µ—à–µ–º:', messageHash);
            }
        }
    }, [encryptedText, encryptionKey, originalText, saveMessage, lastSavedHash]);

    const handleEncryptWithHistory = async () => {
        console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é');
        console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
        console.log('üìù –¢–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', text);
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        await handleEncrypt();
    };

    const handleSendToTelegram = async () => {
        if (!telegramChatId.trim()) {
            alert("–í–≤–µ–¥–∏—Ç–µ chat_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
            return;
        }

        if (!encryptedText || !encryptionKey) {
            alert("–°–Ω–∞—á–∞–ª–∞ –∑–∞—à–∏—Ñ—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            return;
        }

        const success = await sendToTelegram({
            chat_id: telegramChatId.trim(),
            encrypted_text: encryptedText,
            encryption_key: encryptionKey,
            original_text: text
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        if (success && messages.length > 0) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∞–º–æ–µ –Ω–æ–≤–æ–µ)
            const lastMessage = messages[0];
            updateMessage(lastMessage.id, {
                sentToTelegram: true,
                telegramChatId: telegramChatId.trim()
            });
        }

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ chat_id –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (success) {
            setTelegramChatId("");
        }
    };

    const toggleTelegramForm = () => {
        setShowTelegramForm(!showTelegramForm);
        if (showTelegramForm) {
            clearStatus();
        }
    };

  const tabs = [
    {
      id: "encrypt",
      label: "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ",
      icon: "üîê",
      content: (
        <div className="encrypt-tab">
          <h2>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>
          <textarea
            value={text}
            onChange={(e) => setText(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."
            rows={4}
          />
          <button className="encrypt-btn" onClick={handleEncryptWithHistory} inert={isEncrypting} disabled={!text || isEncrypting}>
            {isEncrypting ? "–ó–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è..." : "–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"}
          </button>
        </div>
      )
    },
    {
      id: "history",
      label: "–ò—Å—Ç–æ—Ä–∏—è",
      icon: "üìù",
      content: (
        <div>
          <div style={{ marginBottom: '1rem', padding: '0.5rem', background: '#f8f9fa', borderRadius: '4px', fontSize: '0.9rem' }}>
            <strong>–û—Ç–ª–∞–¥–∫–∞:</strong> –°–æ–æ–±—â–µ–Ω–∏–π: {messages.length}, –ó–∞–≥—Ä—É–∑–∫–∞: {historyLoading ? '–î–∞' : '–ù–µ—Ç'}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user?.id || '–ù–µ—Ç'}
            {hasDuplicates() && (
              <>
                <br />
                <button 
                  onClick={removeDuplicates}
                  style={{ 
                    marginTop: '0.5rem', 
                    padding: '0.25rem 0.5rem', 
                    fontSize: '0.8rem',
                    background: '#ffc107',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}
                >
                  üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
                </button>
              </>
            )}
          </div>
          <MessageHistory
            messages={messages}
            isLoading={historyLoading}
            onDeleteMessage={deleteMessage}
            onClearHistory={clearHistory}
            onRemoveDuplicates={removeDuplicates}
            hasDuplicates={hasDuplicates()}
          />
        </div>
      )
    }
  ];

  return (
    <div className="encryption-form">
      <Tabs 
        tabs={tabs} 
        activeTab={activeTab} 
        onTabChange={setActiveTab} 
      />
      {result && (
        <div className="result">
          <div className="result-header">
            <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è</h3>
          </div>
          <div className="result-content">
            <div className="result-item">
              <div className="result-label">
                <label>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</label>
                <button 
                  className="copy-btn" 
                  onClick={copyEncryptedText}
                  title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
                >
                  {copyStatus.text ? "‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ" : "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"}
                </button>
              </div>
              <div className="result-value">
                <pre>{encryptedText}</pre>
              </div>
            </div>
            <div className="result-item">
              <div className="result-label">
                <label>–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:</label>
                <button 
                  className="copy-btn" 
                  onClick={copyKey}
                  title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
                >
                  {copyStatus.key ? "‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ" : "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"}
                </button>
              </div>
              <div className="result-value">
                <pre>{encryptionKey}</pre>
              </div>
            </div>
          </div>
          
          {/* Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ */}
          <div className="telegram-section">
            <button 
              className="telegram-send-btn" 
              onClick={toggleTelegramForm}
            >
              {showTelegramForm ? "‚úñ –°–∫—Ä—ã—Ç—å" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"}
            </button>
            
            {showTelegramForm && (
              <div className="telegram-form">
                <div className="form-group">
                  <label htmlFor="telegram-chat-id">
                    Chat ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
                  </label>
                  <div className="input-with-button">
                    <input
                      id="telegram-chat-id"
                      type="text"
                      value={telegramChatId}
                      onChange={(e) => setTelegramChatId(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 568285771)"
                      className="telegram-input"
                    />
                    <button 
                      type="button"
                      className="get-chat-id-btn"
                      onClick={() => window.open('/get-chat-id.html', '_blank')}
                      title="–ü–æ–ª—É—á–∏—Ç—å chat_id"
                    >
                      üîç –ü–æ–ª—É—á–∏—Ç—å ID
                    </button>
                  </div>
                  <small className="help-text">
                    <strong>üì± –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ @username:</strong>
                    <br />
                    1. –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É <a href="https://t.me/encrypt_app_bot" target="_blank">@encrypt_app_bot</a>
                    <br />
                    2. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 568285771)
                    <br />
                    <br />
                    <strong>‚ùå –ù–µ–ª—å–∑—è:</strong> –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ @username
                    <br />
                    <strong>‚úÖ –ú–æ–∂–Ω–æ:</strong> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π chat_id
                  </small>
                </div>
                
                <button 
                  className="telegram-send-btn" 
                  onClick={handleSendToTelegram}
                  disabled={isSending || !telegramChatId.trim()}
                >
                  {isSending ? "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..." : "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"}
                </button>
                
                {sendStatus && (
                  <div className={`telegram-status ${sendStatus.success ? 'success' : 'error'}`}>
                    {sendStatus.success ? "‚úÖ" : "‚ùå"} {sendStatus.message}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};
