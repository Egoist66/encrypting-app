import { useState, useEffect } from 'react';
import { EncryptedMessage, MessageHistoryStorage } from '../types/message-history';

const STORAGE_KEY = 'encrypting_app_message_history';

export const useMessageHistory = (userId: string | null) => {
  const [messages, setMessages] = useState<EncryptedMessage[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ localStorage
  useEffect(() => {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è userId:', userId);
    
    if (!userId) {
      console.log('‚ùå –ù–µ—Ç userId, –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è');
      setMessages([]);
      setIsLoading(false);
      return;
    }

    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', stored);
      
      if (stored) {
        const history: MessageHistoryStorage = JSON.parse(stored);
        const userHistory = history[userId];
        console.log('üë§ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userHistory);
        
        if (userHistory) {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
          const sortedMessages = userHistory.messages.sort((a, b) => b.timestamp - a.timestamp);
          console.log('üìù –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', sortedMessages);
          setMessages(sortedMessages);
        } else {
          console.log('üìù –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
      } else {
        console.log('üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    } finally {
      setIsLoading(false);
    }
  }, [userId]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const saveMessage = (message: Omit<EncryptedMessage, 'id' | 'timestamp'>) => {
    if (!userId) {
      console.log('‚ùå –ù–µ—Ç userId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', { userId, message });

    const newMessage: EncryptedMessage = {
      ...message,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      timestamp: Date.now(),
    };

    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      let history: MessageHistoryStorage = stored ? JSON.parse(stored) : {};

      if (!history[userId]) {
        history[userId] = { userId, messages: [] };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç + –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç + –∫–ª—é—á)
      const isDuplicate = history[userId].messages.some(existingMessage => 
        existingMessage.originalText === message.originalText &&
        existingMessage.encryptedText === message.encryptedText &&
        existingMessage.encryptionKey === message.encryptionKey
      );

      if (isDuplicate) {
        console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage');
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
      history[userId].messages.unshift(newMessage);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
      if (history[userId].messages.length > 100) {
        history[userId].messages = history[userId].messages.slice(0, 100);
      }

      localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
      setMessages(prev => [newMessage, ...prev]);
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram)
  const updateMessage = (messageId: string, updates: Partial<EncryptedMessage>) => {
    if (!userId) return;

    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      if (!stored) return;

      const history: MessageHistoryStorage = JSON.parse(stored);
      if (!history[userId]) return;

      const messageIndex = history[userId].messages.findIndex(msg => msg.id === messageId);
      if (messageIndex !== -1) {
        history[userId].messages[messageIndex] = {
          ...history[userId].messages[messageIndex],
          ...updates,
        };

        localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
        setMessages(prev => 
          prev.map(msg => 
            msg.id === messageId 
              ? { ...msg, ...updates }
              : msg
          )
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  };

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const deleteMessage = (messageId: string) => {
    if (!userId) return;

    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      if (!stored) return;

      const history: MessageHistoryStorage = JSON.parse(stored);
      if (!history[userId]) return;

      history[userId].messages = history[userId].messages.filter(msg => msg.id !== messageId);
      localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
      setMessages(prev => prev.filter(msg => msg.id !== messageId));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  };

  // –û—á–∏—â–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const clearHistory = () => {
    if (!userId) return;

    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      if (!stored) return;

      const history: MessageHistoryStorage = JSON.parse(stored);
      delete history[userId];
      localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
      setMessages([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
  };

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  const removeDuplicates = () => {
    if (!userId) return;

    try {
      const stored = localStorage.getItem(STORAGE_KEY);
      if (!stored) return;

      const history: MessageHistoryStorage = JSON.parse(stored);
      if (!history[userId]) return;

      const uniqueMessages: EncryptedMessage[] = [];
      const seen = new Set<string>();

      for (const message of history[userId].messages) {
        // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∫–æ–¥–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã)
        const messageKey = btoa(encodeURIComponent(`${message.originalText}-${message.encryptedText}-${message.encryptionKey}`));
        if (!seen.has(messageKey)) {
          seen.add(messageKey);
          uniqueMessages.push(message);
        }
      }

      history[userId].messages = uniqueMessages;
      localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
      setMessages(uniqueMessages);
      
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${history[userId].messages.length - uniqueMessages.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    }
  };

  return {
    messages,
    isLoading,
    saveMessage,
    updateMessage,
    deleteMessage,
    clearHistory,
    removeDuplicates,
  };
};
